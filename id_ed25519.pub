import streamlit as st
import speech_recognition as sr
import os
import pywhatkit
import datetime

st.set_page_config(page_title="Voice Assistant", page_icon="🎤")
st.title("🧠 Smart Voice Assistant + WhatsApp Messenger")

st.markdown("⚠️ **Voice commands will now execute any text as a system 
command! Use carefully.**")

# Function to recognize speech
def recognize_command():
    recognizer = sr.Recognizer()
    with sr.Microphone() as source:
        with st.spinner("🎧 Listening... Please speak"):
            recognizer.adjust_for_ambient_noise(source)
            try:
                audio = recognizer.listen(source, timeout=5)
                text = recognizer.recognize_google(audio)
                return text.lower()
            except sr.WaitTimeoutError:
                return "Timeout: No speech detected."
            except sr.UnknownValueError:
                return "Sorry, could not understand your voice."
            except sr.RequestError:
                return "Network error. Please check your internet."

# Section: Voice Command
st.header("🎤 Voice Command")
if st.button("Start Listening"):
    command = recognize_command()
    st.markdown(f"🗣️ You said: **{command}**")

    if command == "exit":
        st.success("👋 Exiting voice assistant.")
    elif command.startswith("search for"):
        query = command.replace("search for", "").strip()
        if "youtube" in query:
            search = query.replace("on youtube", "").strip().replace(" ", 
"+")
            os.system(f'start chrome 
"https://www.youtube.com/results?search_query={search}"')
            st.success(f"🔎 Searching YouTube for: {search.replace('+', ' 
')}")
        else:
            search = query.replace(" ", "+")
            os.system(f'start chrome 
"https://www.google.com/search?q={search}"')
            st.success(f"🔎 Searching Google for: {search.replace('+', ' 
')}")
    else:
        st.warning("⚠️ Executing raw command. Be cautious!")
        os.system(command)
        st.success(f"✅ Executed: {command}")

# Section: WhatsApp Message Sender
st.header("📱 Send WhatsApp Message")

tab1, tab2 = st.tabs(["Send Instantly", "Schedule Message"])

with tab1:
    number_now = st.text_input("📞 Phone Number (with +91)", 
key="now_number")
    message_now = st.text_area("💬 Message", key="now_message")
    if st.button("Send Now"):
        try:
            pywhatkit.sendwhatmsg_instantly(phone_no=number_now, 
message=message_now, wait_time=10, tab_close=True)
            st.success(f"📤 Message sent to {number_now}")
        except Exception as e:
            st.error(f"❌ Failed: {e}")

with tab2:
    number_sch = st.text_input("📞 Phone Number (with +91)", 
key="sched_number")
    message_sch = st.text_area("💬 Message", key="sched_message")
    date_sch = st.date_input("📅 Select Date", 
value=datetime.date.today())
    hour_sch = st.number_input("🕐 Hour", min_value=1, max_value=12, 
value=10)
    minute_sch = st.number_input("🕑 Minute", min_value=0, max_value=59, 
value=30)
    am_pm = st.radio("AM / PM", ["AM", "PM"])

    if st.button("Schedule Message"):
        try:
            hour_24 = hour_sch if am_pm == "AM" else (hour_sch % 12) + 12
            send_time = datetime.datetime.combine(date_sch, 
datetime.time(hour_24, minute_sch))
            now = datetime.datetime.now()
            if send_time < now:
                st.warning("⏳ Scheduled time is in the past. Please 
adjust.")
            else:
                pywhatkit.sendwhatmsg(number_sch, message_sch, hour_24, 
minute_sch)
                st.success(f"📅 Message scheduled at 
{hour_sch}:{minute_sch:02d} {am_pm} on {date_sch}")
        except Exception as e:
            st.error(f"❌ Failed to schedule: {e}")

